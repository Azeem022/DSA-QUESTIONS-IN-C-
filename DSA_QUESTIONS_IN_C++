//####################################### QUESTION CONVERT DECIMAL TO BINARY ####################################################################
#include<iostream>
#include<math.h>
using namespace std;
int main()
{
	int n;
	cout<<"Enter the number"<<n<<endl;
	cin>>n;
	int ans = 0;
	int i = 0;
	while(n!=0)
	{
		int bit = n & 1;
		ans = (bit * pow(10,i)+ans);
		n = n>>1;
		i++;
	}
	cout<<"Answer is :"<<ans<< endl;
	return 0;
}

                          OR         OR         OR          OR            OR           OR             OR             OR


//################################## DECIMAL TO BINARY #################################################
#include<iostream>
using namespace std;
int main()
{
    int num;
    cout<<"Enter the number:";
    cin>>num;
    int rem, ans=0,mul=1;
    while(num>0)
    {
    	//remainder
    	rem = num%2;
    	//quotient
    	num = num/2;
    	//ans
    	ans= rem*mul+ans;
    	//mul
    	mul=mul*10;
	}
	cout<<"Answer is :"<<ans;
	return 0;
}

TRICK FOR CONVERSION OF BINARY TO DECIMAL AND DECIMAL TO BINARY ONLY YOU HAVE TO CHANGE 2 IN PLACE OF 10 AND 10 IN PLACE OF 2.

//#######################################QUESTION BINARY TO DECIMAL####################################################################
#include<iostream>
#include<math.h>
using namespace std;
int main()
{
	int n;
	cout<<"Enter the number"<<n<<endl;
	cin>>n;
	int ans = 0;
	int i = 0;
	while(n!=0)
	{
		int digit = n%10;
		if(digit == 1)
		{
			ans = ans + pow(2,i);
		}
		n = n/10;
		i++;
	}
	cout<<"Answer is :"<<ans<< endl;
	return 0;
}

                                      OR         OR           OR            OR                 OR                  OR                     OR

//################################## BINARY TO DECIMAL #################################################
#include<iostream>
using namespace std;
int main()
{
    int num;
    cout<<"Enter the number:";
    cin>>num;
    int rem, ans=0,mul=1;
    while(num>0)
    {
    	//remainder
    	rem = num%10;
    	//quotient
    	num = num/10;
    	//ans 
    	ans= rem*mul+ans;
    	//mul
    	mul=mul*2;
	}
	cout<<"Answer is :"<<ans;
	return 0;
}


//#######################################QUESTION GIVE AN INTEGER NUMBER N,RETURN THE DIFFERENCE BETWEEN THE PRODUCT OF ITS DIGIT AND SUM OF ITS DIGIT####################################################################
#include<iostream>
#include<math.h>
using namespace std;
int main()
{
	int n;
	cout<<"Enter the number"<<n<<endl;
	cin>>n;
    int last_digit,product=1,sum=0;
	while(n!=0)
	{
		int last_digit = n%10;
		product = last_digit*product;
		sum = sum+ last_digit;
		n = n/10;

	}
	int difference = product - sum;
	cout<<"product is :"<<product<<endl;
	cout<<"sum is :"<<sum<<endl;
	cout<<"difference is :"<<difference<< endl;
	return 0;
}

//############################## QUESTION GIVE A SIGNED 32_BIT INTEGER X, RETURN X WITH ITS DIGITS REVERSED. 
//IF REVERSING X CUSES THE VALUE TO GO OUTSIDE THE SIGNED 32_BIT INTEGER RANGE [-2*(32),2(31)-1],THEN RETURN 0 #################################
#include<iostream>
#include<math.h>
using namespace std;
int main()
{
	int n;
	cout<<"Enter the number"<<n<<endl;
	cin>>n;
    int last_digit,ans=0;
	while(n!=0)
	{
		int last_digit = n%10;
	 if(ans > INT_MAX/10 || ans < INT_MIN/10)
	 {
	 	return 0;
	 }
	 ans = (ans * 10) + last_digit;
	 n=n/10;
	}
	cout<<"anser is :"<<ans<<endl;
	return 0;
}

       OR             OR         OR           OR            OR                 OR                  OR                     OR

//############################## QUESTION GIVE A SIGNED 32_BIT INTEGER X, RETURN X WITH ITS DIGITS REVERSED. 
//IF REVERSING X CUSES THE VALUE TO GO OUTSIDE THE SIGNED 32_BIT INTEGER RANGE [-2*(32),2(31)-1],THEN RETURN 0 #################################

//################################## GIVEN AN INTEGER NUM, REPEATIDLY ADD ALL ITS DIGIT UNTIL THE RESULT HAS ONLY ONE DIGIT, AND RETURN IT. #################################################
#include<iostream>
using namespace std;
int main()
{
    int num;
    cout<<"Enter the number:";
    cin>>num;
    int ans=0,rem,div;
    while(num!=0)
    {
    	rem=num%10;
    	num=num/10;
    	if(ans>INT_MAX/10 || ans<INT_MIN/10)
    	return 0;
    	ans=ans*10+rem;
	}
	cout<<ans;
	return 0;
}



//################################## GIVEN AN INTEGER NUM, REPEATIDLY ADD ALL ITS DIGIT UNTIL THE RESULT HAS ONLY ONE DIGIT, AND RETURN IT. #################################################
#include<iostream>
using namespace std;
int main()
{
    int num;
    cout<<"Enter the number:";
    cin>>num;
    while(num>9)
    {
    	int rem, ans=0;
    	while(num>0)
    {
    	//remainder
    	rem = num%10;
    	//quotient  
    	num = num/10;
    	//ans 
    	ans= rem+ans;
    	//mul
	}
	 num=ans;
	}
	cout<<num;
	return 0;
}

//################################## GIVEN AN INTEGER n,RETURN TRUE IF IT THE POWER OF 2 OTHERWISE IT RETURN FALSE. #################################################
#include<iostream>
using namespace std;
int main()
{
	int n;
	cout<<"Enter the value of n:"<<endl;
	cin>>n;
	if(n<1)
	return 0;
	while(n!=1)
	{
		if(n%2==1)
		return 0;
		n=n/2;
	}
	cout<<"yes it is the power of 2"<<endl;
	return 0;
}

//################################## SQUARE ROOT OF N NUMBER. #################################################
#include<iostream>
#include<cmath>
using namespace std;
int main()
{
	int n;
	cout<<"Enter the value of n:"<<endl;
	cin>>n;
	cout<<sqrt(n);
	return 0;
}

//====================================PRIME NUMBER OR NOT ===================================================
#include <iostream>
using namespace std;
int main() {
   int n,i;
   cout<<"enter the number :"<<endl;
   cin>>n;
   if(n<2)
   {
       cout<<"not prime number:";
       return 0;

   }
   else
   {
       for(i=2;i<n;i++)
           {
               if(n%i==0){
                   cout<<"not prime";
                   return 0;
               }
           }
       cout<<"prime number";
       return 0;
   }
    return 0;
}



//################################## PALENDROME OR NOT. #################################################
#include<iostream>
#include<cmath>
using namespace std;
int main()
{
	int x;
	cout<<"Enter the value of x:"<<endl;
	cin>>x;
	if(x<0)
	return 0;
	int num = x, rem, ans=0;
	while(num!=0)
	{
		rem = num%10;
		num =  num/10;
		if(ans>INT_MAX)
		return 0;
		ans = ans*10+rem;
	};
	if(ans==x)
	cout<<"Palendrome"<<endl;
	else
	cout<<"Not Palendrome"<<endl;
	return 0;
}

//################################## COMPLEMENT OF AN INTEGER. #################################################
#include<iostream>
#include<cmath>
using namespace std;
int main()
{
    int n;
    cout<<"Enter the value of n:"<<endl;
    cin>>n;
    if(n==0)
    return 0;
    int ans=0,rem,mul=1;
    while(n!=0)
    {
    	rem=n%2;
    	rem=rem^1;
    	n=n/2;
    	ans = ans+rem*mul;
    	mul=mul*2;
	}
	cout<<ans;
	return 0;
}


//################################## ARMSTRONG NUMBER OR NOT WITH HOW MANY DIGITS. #################################################
#include<iostream>
using namespace std;
#include<cmath>
int countdigit(int n)
{
	int count = 0;
	while(n!=0)
	{
		count ++;
		n=n/10;
	}
	return count;
}
bool Armstrong(int num , int digit)
{
	int n=num,ans=0,rem;
	while(n!=0)
	{
		rem=n%10;
		n=n/10;
		ans=ans+pow(rem,digit);
	}
	if(ans==num)
	return 1;
	else
	return 0;
}
int main()
{
	int num;
	cout<<"Enter the value of number:"<<endl;
	cin>>num;
	int digit = countdigit(num);
	cout<<"number of digit:"<<countdigit(num)<<endl;;
	cout<<"Is Armstrong number:"<<Armstrong(num,digit);//?"yes":"no";
	return 0;
}

===================================== PRINT SMALLEST ARRAY IN AN ARRAY =======================================
#include<iostream>
using namespace std;
int main()
{
	int arr[5]= {55,63,33,44,55};
	int ans= INT_MAX;
	for(int i=0;i<5;i++)
	{
		if(arr[i]<ans){
			ans=arr[i];
		}
	}
	cout<<ans;
	return 0;
}

//===================================== PRINT LARGEST ARRAY IN AN ARRAY =======================================
#include<iostream>
using namespace std;
int main()
{
	int arr[5]= {55,63,33,44,55};
	int ans= INT_MIN;
	for(int i=0;i<5;i++)
	{
		if(arr[i]>ans){
			ans=arr[i];
		}
	}
	cout<<ans;
	return 0;
}

//===================================== SEARCHING OF ARRAY =======================================
#include<iostream>
using namespace std;
int main()
{
	int n,x;
	cout<<"entre the value of n:"<<endl;
	cin>>n;
	cout<<"Enter the value which you want to find:"<<endl;
	cin>>x;
	int arr[n];
	for(int i=0;i<n;i++)
	{
		cin>>arr[i];
	}
	for(int i=0;i<=n;i++)
	{
	    if(arr[i]==x)
	    {
	    	cout<<"position of your element is:"<<i<<endl;
		}
	}
	return -1;
	return 0;
}

//===================================== REVERSE OF AN ARRAY =======================================
#include<iostream>
using namespace std;
int main()
{
	int arr[6]= {1,2,3,4,5,6};
	int start=0, end=5;
	while(start<end)
	{
		swap(arr[start],arr[end]);
		start++;
		end--;
	}
	for(int i=0;i<6;i++)
	cout<<arr[i]<<" ";
	return 0;
}

//===================================== SECOND LARGEST ELEMENT IN AN ARRAY =======================================
#include<iostream>
using namespace std;
int main()
{
	int n;
	cout<<"Enter the size of an array:"<<endl;
	cin>>n;
	int arr[n];
	for(int i=0;i<n;i++)
	{
		cin>>arr[i];
	}
	int ans=-1;
	//Largest element
	for(int i=0;i<n;i++)
	{
		if(arr[i]>ans)
		ans=arr[i];
	}
	//Second largest
	int second = -1;
	for(int i=0;i<n;i++)
	{
		if(arr[i]!=ans)
		second = max(second,arr[i]);
	};
	cout<<"second largest element is:"<<second<<endl;
	return 0;
}

//===================================== MISSING ELEMENT IN AN ARRAY =======================================
#include<iostream>
using namespace std;
int main()
{
	int n;
	cout<<"Enter the size of an array:"<<endl;
	cin>>n;
	int arr[n];
	for(int i=0;i<n;i++)
	{
		cin>>arr[i];
	}
	int sum=0;
	for(int i=0;i<n-1;i++)
	{
		sum+=arr[i];
	}
	int ans = n*(n+1)/2;
	cout<<"missing element is:"<< ans - sum;
	return 0;
}


//===================================== FIND AN ARRAY IN FIBONACCI SERIES  =======================================
#include<iostream>
using namespace std;
int main()
{
	int n;
	cout<<"Enter the size of an array:"<<endl;
	cin>>n;
	int arr[1000];
	arr[0] = 0;
	arr[1] = 1;
	for(int i=2;i<=n-1;i++)
    {
    arr[i] = arr[i-1] + arr[i-2];
	}
	cout<<arr[n-1]<<" ";
	return 0;
}

//===================================== SELECTION SORTING OF ARRAY  =======================================
#include<iostream>
using namespace std;
int main()
{
	int arr[6] = { 10,8,6,4,2,1};
	for(int i=0;i<5;i++)
	{
                	//it assume that the index which stored the smallest element initially 
		int index = i;
		for(int j=i+1;j<6;j++)
		{
			if(arr[j]<arr[index])
			index = j;
		}
		swap(arr[i],arr[index]);
	}
	for(int i=0;i<6;i++)
	{
		cout<<arr[i]<<" ";
	}
}

//================================== INSERTION SORT =========================================
#include<iostream>
using namespace std;
int main()
{
	int n;
	cout<<"enter the size of an array:"<<endl;
	cin>>n;
	int arr[1000];
	for(int i=0;i<n;i++)
	cin>>arr[i];
	for(int i=1;i<n;i++)
	{
		for(int j=i;j>0;j--)
		{
			if(arr[j]<arr[j-1])
			swap(arr[j],arr[j-1]);
			else
			break;
		}
	}
	for(int i=0;i<n;i++)
	{
		cout<<arr[i]<<" ";
	}
	return 0;
}

//================================== BINARY SEARCH =========================================
#include<iostream>
using namespace std;
int BinarySearch(int arr[], int n,int key)
{
	//start , end , mid
	int start = 0, end = n-1, mid;
	while(start<=end)
	{
		//mid ko find kro
		mid = start+(end-start)/2;
		//arr[mid]==key
		if(arr[mid]==key)
		return mid;
		//arr[mid]<key
		else if (arr[mid]<key)
		start = mid + 1;
		//arr[mid]>key
		else
		mid-1;
	}
	return -1;
}
int main()
{
	int n;
	cout<<"Enter the size of an array:"<<endl;
	cin>>n;
	int arr[1000];
	cout<<"Enter element in an array:"<<endl;
	for(int i=0;i<n;i++)
	{
		cin>>arr[i];
	}
	int key;
	cout<<"Enter the value of key:"<<endl;
	cin>>key;
	cout<<BinarySearch(arr,n,key)<<endl;
	return 0;
}

//============================ SEARCH POSITION OF UNPRESENT ARRAY IN ARRAY LIST USING BINARY SEARCH =========================
#include<iostream>
using namespace std;
int main()
{
	int n;
	cout<<"Enter the size of an array:"<<endl;
	cin>>n;
	if(n <= 0)
	{
		cout<<"Invalid array size."<<endl;
		return 1;
	}
	int target;
	cout<<"Enter the value of your target:"<<endl;
	cin>>target;
	cout<<"input the values of your array"<<endl;
	int arr[1000];
	for(int i = 0; i<n;i++)
	{
		cin>>arr[i];
	}
	//finding the first occurence
	int start = 0, end = n-1, mid , ans=n;
	while(start<= end)
	{
		mid = start + (end - start)/2;
		if(arr[mid] == target)
		{
			ans = mid;
			break;
		}
		else if(arr[mid]<target)
		{
			start = mid+1;
		}
		else
		{
			ans = mid;
			end = mid -1;
		}
	}
	cout<<"your target value will on " << ans <<" position"<<endl;
	return 0;
}

//===========================SQUARE ROOT USING BINARY SEARCH ==========================
#include<iostream>
using namespace std;
int sqrt(int n){
	int start=1;
	int end=n;
	int ans =1;
	while(start<=end)
	{
		int mid = start+(end-start)/2;
		int sqrt = mid*mid;
		if(sqrt<=n){
			start =mid +1;
			ans = mid;
		}
		else{
			end = mid - 1;
		}
	}
	return ans;
}
int main()
{
	int n;
	cout<<"Enter the value of n:"<<endl;
	cin>>n;
	cout<<"square root of "<<n<<" is : "<<sqrt(n) <<endl;
	return 0;
}

//============================PEAK INDEX IN A MOUNTAIN ARRAY ==================================
#include<iostream>
using namespace std;
int main()
{
	int n;
	cout<<"Enter the size of an array:"<<endl;
	cin>>n;
	cout<<"fill your array element:"<<endl;
	int arr[1000];
	for(int i=0;i<n;i++)
	{
		cin>>arr[i];
	} 
	 int start = 0, end = n-1, mid;
	 while(start <= end)
	 {
	 	mid = end+(start-end)/2;
	 	//Peak element
	 	if(arr[mid] > arr[mid-1] && arr[mid] < arr[mid+1])
	 	return mid;
	 	else if(arr[mid]>arr[mid-1])
	 	start = mid + 1;
	 	else
	 	end = mid -1;
	 }
	 cout<<"Your peak element on " <<mid <<" position";
	return 0;
}

//===========================================ROTATED MINIMUM SORTED ARRAY ==========================================================
#include<iostream>
using namespace std;
int main()
{
	int n;
	cout<<"Enter the size of an array:"<<endl;
	cin>>n;
	cout<<"Enter your "<< n <<" array"<<endl;
	int arr[n];
	for(int i =0;i<n;i++)
	{
		cin>>arr[i];
	}
	int start =0, end = n-1, ans = arr[0];
	while(start<=end)
	{
		int mid = start+(end-start)/2;
		
		//left side sorted array
		if(arr[mid] >= arr[0])
		start = mid + 1;
		
		//right side sorted
		else
		{
			ans = arr[mid];
			end = mid - 1;
		}
	}
	cout<< ans;
	return 0;
}

//====================================BINARY SEARCH ROTATED ARRAY =========================
#include <iostream>
using namespace std;

int binarySearchRotated(int arr[], int n, int target) {
    int start = 0, end = n - 1;

    while (start <= end) {
        int mid = start + (end - start) / 2;

        if (arr[mid] == target) {
            return mid;
        }

        // Determine which part is sorted
        if (arr[start] <= arr[mid]) {
            // Left side is sorted
            if (arr[start] <= target && target < arr[mid]) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        } else {
            // Right side is sorted
            if (arr[mid] < target && target <= arr[end]) {
                start = mid + 1;
            } else {
                end = mid - 1;
            }
        }
    }

    // Target not found
    return -1;
}

int main() {
    int n;
    cout << "Enter the size of array:" << endl;
    cin >> n;

    if (n <= 0 || n > 1000) {
        cout << "Array size should be between 1 and 1000." << endl;
        return 1;
    }

    int arr[1000];
    cout << "Fill your array:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int target;
    cout << "Enter your target value:" << endl;
    cin >> target;

    int result = binarySearchRotated(arr, n, target);

    if (result != -1) {
        cout << "Your answer is: " << result << endl;
    } else {
        cout << "Target not found in the array." << endl;
    }

    return 0;
}


//====================================kth MISSING POSITIVE INTEGER IN BINARY SEARCH ROTATED ARRAY =========================
#include <iostream>
#include <vector>
using namespace std;

// Function to count the number of missing positive integers up to a given value
int countMissingUpTo(const vector<int>& arr, int value) {
    int missingCount = 0;
    int n = arr.size();
    int start = 0;
    int end = n - 1;

    while (start <= end) {
        int mid = start + (end - start) / 2;
        if (arr[mid] <= value) {
            missingCount = arr[mid] - (mid + 1);  // Calculate the missing count up to arr[mid]
            start = mid + 1;
        } else {
            end = mid - 1;
        }
    }

    return missingCount;
}

// Function to find the kth missing positive integer in a rotated sorted array
int findKthMissingPositive(const vector<int>& arr, int k) {
    int n = arr.size();
    int start = 1;  // Start with the first positive integer
    int end = arr[n - 1] + k;  // Upper bound to search

    while (start <= end) {
        int mid = start + (end - start) / 2;
        int missingCount = countMissingUpTo(arr, mid);

        if (missingCount < k) {
            start = mid + 1;
        } else {
            end = mid - 1;
        }
    }

    return start;
}

// ==========================================Function to find the index of the smallest element (rotation point) in a rotated sorted array================================================
int findRotationPoint(const vector<int>& arr) {
    int start = 0;
    int end = arr.size() - 1;

    while (start < end) {
        int mid = start + (end - start) / 2;
        if (arr[mid] > arr[end]) {
            start = mid + 1;
        } else {
            end = mid;
        }
    }

    return start;
}

int main() {
    int n, k;
    cout << "Enter the size of the array: ";
    cin >> n;
    vector<int> arr(n);

    cout << "Enter the elements of the rotated sorted array: ";
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
    }

    cout << "Enter the value of k: ";
    cin >> k;

    int rotationPoint = findRotationPoint(arr);
    vector<int> sortedArr;

    // Construct sorted array from rotation point
    for (int i = rotationPoint; i < n; ++i) {
        sortedArr.push_back(arr[i]);
    }
    for (int i = 0; i < rotationPoint; ++i) {
        sortedArr.push_back(arr[i]);
    }

    int result = findKthMissingPositive(sortedArr, k);
    cout << "The " << k << "th missing positive integer is: " << result-1 << endl;

    return 0;
}
//==========================================you have N book, each with A[I] number of pages. M students need to be allocated contiguous books , with each student at-least one book. Out of permutations, the goal is to find the permutation where the student with the most books allocated to him gets the minimum number of pages out of all possible permutation. Return -1 if a valid assignment is not possible ====================
#include <iostream>
#include <vector>
#include <numeric>
using namespace std;

bool isFeasible(const vector<int>& A, int M, int maxPages) {
    int studentCount = 1;
    int currentPages = 0;

    for (int pages : A) {
        if (pages > maxPages) {
            return false; // A single book cannot exceed maxPages
        }
        
        if (currentPages + pages > maxPages) {
            studentCount++; // Need to allocate to a new student
            currentPages = pages; // Start with the current book
            if (studentCount > M) {
                return false; // More students than allowed
            }
        } else {
            currentPages += pages; // Add pages to current student's total
        }
    }

    return true; // Feasible to allocate books under current maxPages
}

int allocateBooks(const vector<int>& A, int M) {
    int n = A.size();
    if (n < M) {
        return -1; // Not enough books for students
    }

    int low = *max_element(A.begin(), A.end()); // Maximum single book pages
    int high = accumulate(A.begin(), A.end(), 0); // Total pages

    int result = high; // Initialize result

    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (isFeasible(A, M, mid)) {
            result = mid; // Found a feasible allocation
            high = mid - 1; // Try for a better (lower) maximum
        } else {
            low = mid + 1; // Increase maximum pages
        }
    }

    return result;
}

int main() {
    int n, m;
    cout << "Enter the number of books: ";
    cin >> n;
    vector<int> A(n);

    cout << "Enter the number of pages in each book: ";
    for (int i = 0; i < n; ++i) {
        cin >> A[i];
    }

    cout << "Enter the number of students: ";
    cin >> m;

    int result = allocateBooks(A, m);
    cout << "The minimum number of pages allocated to the student with the most pages is: " << result << endl;

    return 0;
}

// ==============================  PAINTER PARTITION PROBLEM  ====================================================================
#include <iostream>
#include <numeric>
#include <algorithm> // For std::max
using namespace std;

// Function to check if it's feasible to allocate books to students
bool isFeasible(int A[], int n, int M, int maxPages) {
    int studentCount = 1; // Start with one student
    int currentPages = 0;

    for (int i = 0; i < n; i++) {
        if (A[i] > maxPages) {
            return false; // A single book cannot exceed maxPages
        }
        
        // Check if adding this book exceeds the limit
        if (currentPages + A[i] > maxPages) {
            studentCount++; // Need to allocate to a new student
            currentPages = A[i]; // Start with the current book
            if (studentCount > M) {
                return false; // More students than allowed
            }
        } else {
            currentPages += A[i]; // Add pages to the current student's total
        }
    }

    return true; // Feasible to allocate books under current maxPages
}

// Function to allocate books and minimize the maximum pages
int allocateBooks(int A[], int n, int M) {
    if (n < M) {
        return -1; // Not enough books for students
    }

    int low = *max_element(A, A + n); // Maximum single book pages
    int high = accumulate(A, A + n, 0); // Total pages

    int result = high; // Initialize result

    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (isFeasible(A, n, M, mid)) {
            result = mid; // Found a feasible allocation
            high = mid - 1; // Try for a better (lower) maximum
        } else {
            low = mid + 1; // Increase maximum pages
        }
    }

    return result;
}

int main() {
    int n, m;

    cout << "Enter the number of books: ";
    cin >> n;
    int A[n];  // Declare an array of size n

    cout << "Enter the number of pages in each book: ";
    for (int i = 0; i < n; ++i) {
        cin >> A[i];
    }

    cout << "Enter the number of students: ";
    cin >> m;

    int result = allocateBooks(A, n, m);
    cout << "The minimum number of pages allocated to the student with the most pages is: " << result << endl;

    return 0;
}



//================================= STL =============================STL================================================STL=======================================
#include<iostream>
#include<vector>
using namespace std;

int main()
{
	// create vector, declare vector1
	vector<int>vector1; 
	
	//size and capacity of vector1
	cout<<"size of vector1 : "<<vector1.size()<<endl;
	cout<<"capacity of vector1 : "<<vector1.capacity()<<endl;
	
	// Adding element to vector1
	vector1.push_back(2);
	vector1.push_back(3);
	vector1.push_back(10);
	cout<<"size of vector1 after adding element : "<<vector1.size()<<endl;
	cout<<"capacity of vector1 after adding element : "<<vector1.capacity()<<endl;
	
	//Update value in vector1
	vector1[1] = 5;  //update second element

//create and manipulate another vector
    vector<int>vector1new;
    vector1new.push_back(4);
    vector1new.push_back(41);
    vector1new.push_back(14);
    vector1new.push_back(42);
    vector1new.push_back(84);
    
    //delete last element
    vector1new.pop_back();
    cout<<"size of vector1new after pop_back: "<<vector1new.size()<<endl;
	cout<<"capacity of vector1new after pop_back: "<<vector1new.capacity()<<endl;
	
    //delete element which you want
    if(vector1new.size()>1)
    {
    	vector1new.erase(vector1new.begin()+1);//itremove 41 element.
	}
    cout<<"size of vector1new after erasing element at index 1 : "<<vector1.size()<<endl;
	cout<<"capacity of vector1new after erasing element : "<<vector1.capacity()<<endl;
	
	//print the contents of vecctor1new
	cout<<"==========Content of vector1new=========="<<endl;
	for(int i = 0; i < vector1new.size(); i++)
	{
		cout<<vector1new[i]<<" ";
	}
	cout << endl;
	
	// we are adding 1 element at position 1.
		vector1new.insert(vector1new.begin()+1,50);
		cout<<endl;
		for(int i = 0; i < vector1new.size(); i++)
	    {
		cout<<vector1new[i]<<" ";
	    }
	    cout<<endl;
	    
	    //Exchange 50 with 37
	    for(int i=0; i<vector1new.size();i++)
	    {
	    	if(vector1new[i]==50)
	    	{
	    		vector1new[i]=37;// update 50 to 37
	    		break; //Exit loop after replacement
			}
		}
		//print the contents of vecctor1new
	cout<<"==========Content of vector1new after replace 37 in palace of 50=========="<<endl;
	for(int i = 0; i < vector1new.size(); i++)
	{
		cout<<vector1new[i]<<" ";
	}
	cout << endl;
	return 0;
}


//===========///////////////==================//////////////////=================///////////////=============///////////
int main()
{
	vector<int>arr;
	arr.push_back(2);
	arr.push_back(12);
	arr.push_back(21);
	arr.push_back(122);
	cout<<arr[0]<<endl;
	cout<<arr.front()<<endl;
	cout<<arr[arr.size()-1]<<endl;
	cout<<arr.back()<<endl;
	for(auto i: arr)
	cout<<i<<" ";
	return 0;
}

int main()
{
	vector<int>ans;
	ans.push_back(345);
	ans.push_back(55);
	ans.push_back(56);
	ans.push_back(35);
	ans.push_back(59);
	
	// sort in increasing order
	sort(ans.begin(),ans.end());
	for(int i=0; i<ans.size(); i++)
	{
		cout<<ans[i]<<" ";
	}
	
	// sort in decreasing order
	sort(ans.rbegin(),ans.rend());
	for(int i=0; i<ans.size(); i++)
	{
		cout<<ans[i]<<" ";
	}
   //search in binary search
     cout<<binary_search(ans.begin(), ans.end(), 55)<<endl;//present or not
     cout<<find(ans.begin(),ans.end(),54)-ans.begin()<<endl;// at which position element is present
}
